{"version":3,"file":"index.es.js","sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/element.ts","../src/interfaces/editor.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: (direction?: 'forward' | 'backward') => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor, { reverse: direction === 'backward' })\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const currentNode = Node.get(editor, path)\n        if (Text.isText(currentNode)) continue\n        const child = node.children[i] as Descendant\n        const prev = currentNode.children[n - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation): Path[] => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path, Descendant, ExtendedType, Ancestor } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  isAncestor: (value: any) => value is Ancestor\n  isElement: (value: any) => value is Element\n  isElementList: (value: any) => value is Element[]\n  isElementProps: (props: any) => props is Partial<Element>\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\nexport const Element: ElementInterface = {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import isPlainObject from 'is-plain-object'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\nimport { Descendant } from './node'\nimport { Element } from './element'\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface BaseEditor {\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: Omit<Text, 'text'> | null\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: (direction?: 'forward' | 'backward') => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport interface EditorInterface {\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  addMark: (editor: Editor, key: string, value: any) => void\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  deleteBackward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteForward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteFragment: (\n    editor: Editor,\n    options?: {\n      direction?: 'forward' | 'backward'\n    }\n  ) => void\n  edges: (editor: Editor, at: Location) => [Point, Point]\n  end: (editor: Editor, at: Location) => Point\n  first: (editor: Editor, at: Location) => NodeEntry\n  fragment: (editor: Editor, at: Location) => Descendant[]\n  hasBlocks: (editor: Editor, element: Element) => boolean\n  hasInlines: (editor: Editor, element: Element) => boolean\n  hasPath: (editor: Editor, path: Path) => boolean\n  hasTexts: (editor: Editor, element: Element) => boolean\n  insertBreak: (editor: Editor) => void\n  insertFragment: (editor: Editor, fragment: Node[]) => void\n  insertNode: (editor: Editor, node: Node) => void\n  insertText: (editor: Editor, text: string) => void\n  isBlock: (editor: Editor, value: any) => value is Element\n  isEditor: (value: any) => value is Editor\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n  isEmpty: (editor: Editor, element: Element) => boolean\n  isInline: (editor: Editor, value: any) => value is Element\n  isNormalizing: (editor: Editor) => boolean\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n  isVoid: (editor: Editor, value: any) => value is Element\n  last: (editor: Editor, at: Location) => NodeEntry\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Text>\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  node: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  normalize: (\n    editor: Editor,\n    options?: {\n      force?: boolean\n    }\n  ) => void\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Ancestor>\n  path: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => Path\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PathRef\n  pathRefs: (editor: Editor) => Set<PathRef>\n  point: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      edge?: 'start' | 'end'\n    }\n  ) => Point\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PointRef\n  pointRefs: (editor: Editor) => Set<PointRef>\n  positions: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<Point, void, undefined>\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  range: (editor: Editor, at: Location, to?: Location) => Range\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    }\n  ) => RangeRef\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n  removeMark: (editor: Editor, key: string) => void\n  start: (editor: Editor, at: Location) => Point\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      voids?: boolean\n    }\n  ) => string\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      voids?: boolean\n    }\n  ) => Range\n  void: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<Element> | undefined\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n}\n\nconst IS_EDITOR_CACHE = new WeakMap<object, boolean>()\n\nexport const Editor: EditorInterface = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(\n    editor: Editor,\n    options: {\n      direction?: 'forward' | 'backward'\n    } = {}\n  ): void {\n    const { direction = 'forward' } = options\n    editor.deleteFragment(direction)\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    if (!isPlainObject(value)) return false\n    const cachedIsEditor = IS_EDITOR_CACHE.get(value)\n    if (cachedIsEditor !== undefined) {\n      return cachedIsEditor\n    }\n    const isEditor =\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    IS_EDITOR_CACHE.set(value, isEditor)\n    return isEditor\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n, p)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Omit<Text, 'text'> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointAfterLocation = Editor.after(editor, at, { voids })\n\n    if (!pointAfterLocation) return\n\n    const [, to] = Editor.last(editor, [])\n\n    const span: Span = [pointAfterLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node, path)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ): void {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  hasPath(editor: Editor, path: Path): boolean {\n    return Node.has(editor, path)\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const {\n      at = editor.selection,\n      unit = 'offset',\n      reverse = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    /**\n     * Algorithm notes:\n     *\n     * Each step `distance` is dynamic depending on the underlying text\n     * and the `unit` specified.  Each step, e.g., a line or word, may\n     * span multiple text nodes, so we iterate through the text both on\n     * two levels in step-sync:\n     *\n     * `leafText` stores the text on a text leaf level, and is advanced\n     * through using the counters `leafTextOffset` and `leafTextRemaining`.\n     *\n     * `blockText` stores the text on a block level, and is shortened\n     * by `distance` every time it is advanced.\n     *\n     * We only maintain a window of one blockText and one leafText because\n     * a block node always appears before all of its leaf nodes.\n     */\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let isNewBlock = false\n    let blockText = ''\n    let distance = 0 // Distance for leafText to catch up to blockText.\n    let leafTextRemaining = 0\n    let leafTextOffset = 0\n\n    // Iterate through all nodes in range, grabbing entire textual content\n    // of block nodes in blockText, and text nodes in leafText.\n    // Exploits the fact that nodes are sequenced in such a way that we first\n    // encounter the block node, then all of its text nodes, so when iterating\n    // through the blockText and leafText we just need to remember a window of\n    // one block node and leaf node, respectively.\n    for (const [node, path] of Editor.nodes(editor, { at, reverse, voids })) {\n      /*\n       * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n       */\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, so by default we will always\n        // yield their first point. If the `voids` option is set to true,\n        // then we will iterate over their content.\n        if (!voids && editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        // Inline element nodes are ignored as they don't themselves\n        // contribute to `blockText` or `leafText` - their parent and\n        // children do.\n        if (editor.isInline(node)) continue\n\n        // Block element node - set `blockText` to its text content.\n        if (Editor.hasInlines(editor, node)) {\n          // We always exhaust block nodes before encountering a new one:\n          //   console.assert(blockText === '',\n          //     `blockText='${blockText}' - `+\n          //     `not exhausted before new block node`, path)\n\n          // Ensure range considered is capped to `range`, in the\n          // start/end edge cases where block extends beyond range.\n          // Equivalent to this, but presumably more performant:\n          //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n          //   blockRange = Range.intersection(range, blockRange) // intersect\n          //   blockText = Editor.string(editor, blockRange, { voids })\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n          blockText = reverse ? reverseText(blockText) : blockText\n          isNewBlock = true\n        }\n      }\n\n      /*\n       * TEXT LEAF NODE - Iterate through text content, yielding\n       * positions every `distance` offset according to `unit`.\n       */\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n\n        // Proof that we always exhaust text nodes before encountering a new one:\n        //   console.assert(leafTextRemaining <= 0,\n        //     `leafTextRemaining=${leafTextRemaining} - `+\n        //     `not exhausted before new leaf text node`, path)\n\n        // Reset `leafText` counters for new text node.\n        if (isFirst) {\n          leafTextRemaining = reverse\n            ? first.offset\n            : node.text.length - first.offset\n          leafTextOffset = first.offset // Works for reverse too.\n        } else {\n          leafTextRemaining = node.text.length\n          leafTextOffset = reverse ? leafTextRemaining : 0\n        }\n\n        // Yield position at the start of node (potentially).\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset: leafTextOffset }\n          isNewBlock = false\n        }\n\n        // Yield positions every (dynamically calculated) `distance` offset.\n        while (true) {\n          // If `leafText` has caught up with `blockText` (distance=0),\n          // and if blockText is exhausted, break to get another block node,\n          // otherwise advance blockText forward by the new `distance`.\n          if (distance === 0) {\n            if (blockText === '') break\n            distance = calcDistance(blockText, unit)\n            blockText = blockText.slice(distance)\n          }\n\n          // Advance `leafText` by the current `distance`.\n          leafTextOffset = reverse\n            ? leafTextOffset - distance\n            : leafTextOffset + distance\n          leafTextRemaining = leafTextRemaining - distance\n\n          // If `leafText` is exhausted, break to get a new leaf node\n          // and set distance to the overflow amount, so we'll (maybe)\n          // catch up to blockText in the next leaf text node.\n          if (leafTextRemaining < 0) {\n            distance = -leafTextRemaining\n            break\n          }\n\n          // Successfully walked `distance` offsets through `leafText`\n          // to catch up with `blockText`, so we can reset `distance`\n          // and yield this position in this node.\n          distance = 0\n          yield { path, offset: leafTextOffset }\n        }\n      }\n    }\n    // Proof that upon completion, we've exahusted both leaf and block text:\n    //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n    //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n    // Helper:\n    // Return the distance in offsets for a step of size `unit` on given string.\n    function calcDistance(text: string, unit: string) {\n      if (unit === 'character') {\n        return getCharacterDistance(text)\n      } else if (unit === 'word') {\n        return getWordDistance(text)\n      } else if (unit === 'line' || unit === 'block') {\n        return text.length\n      }\n      return 1\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n    if (!pointBeforeLocation) {\n      return\n    }\n\n    const [, to] = Editor.first(editor, [])\n\n    // The search location is from the start of the document to the path of\n    // the point before the location passed in\n    const span: Span = [pointBeforeLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n\n  string(\n    editor: Editor,\n    at: Location,\n    options: {\n      voids?: boolean\n    } = {}\n  ): string {\n    const { voids = false } = options\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n      voids,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  isLocation: (value: any) => value is Location\n}\n\nexport const Location: LocationInterface = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  isSpan: (value: any) => value is Span\n}\n\nexport const Span: SpanInterface = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeInterface {\n  ancestor: (root: Node, path: Path) => Ancestor\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n  child: (root: Node, index: number) => Descendant\n  children: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n  descendant: (root: Node, path: Path) => Descendant\n  descendants: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  elements: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<ElementEntry, void, undefined>\n  extractProps: (node: Node) => NodeProps\n  first: (root: Node, path: Path) => NodeEntry\n  fragment: (root: Node, range: Range) => Descendant[]\n  get: (root: Node, path: Path) => Node\n  has: (root: Node, path: Path) => boolean\n  isNode: (value: any) => value is Node\n  isNodeList: (value: any) => value is Node[]\n  last: (root: Node, path: Path) => NodeEntry\n  leaf: (root: Node, path: Path) => Text\n  levels: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  matches: (node: Node, props: Partial<Node>) => boolean\n  nodes: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  parent: (root: Node, path: Path) => Ancestor\n  string: (node: Node) => string\n  texts: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nconst IS_NODE_LIST_CACHE = new WeakMap<any[], boolean>()\n\nexport const Node: NodeInterface = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Extract props from a Node.\n   */\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    const cachedResult = IS_NODE_LIST_CACHE.get(value)\n    if (cachedResult !== undefined) {\n      return cachedResult\n    }\n    const isNodeList = value.every(val => Node.isNode(val))\n    IS_NODE_LIST_CACHE.set(value, isNodeList)\n    return isNodeList\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport interface OperationInterface {\n  isNodeOperation: (value: any) => value is NodeOperation\n  isOperation: (value: any) => value is Operation\n  isOperationList: (value: any) => value is Operation[]\n  isSelectionOperation: (value: any) => value is SelectionOperation\n  isTextOperation: (value: any) => value is TextOperation\n  inverse: (op: Operation) => Operation\n}\n\nexport const Operation: OperationInterface = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathInterface {\n  ancestors: (path: Path, options?: { reverse?: boolean }) => Path[]\n  common: (path: Path, another: Path) => Path\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n  endsAfter: (path: Path, another: Path) => boolean\n  endsAt: (path: Path, another: Path) => boolean\n  endsBefore: (path: Path, another: Path) => boolean\n  equals: (path: Path, another: Path) => boolean\n  hasPrevious: (path: Path) => boolean\n  isAfter: (path: Path, another: Path) => boolean\n  isAncestor: (path: Path, another: Path) => boolean\n  isBefore: (path: Path, another: Path) => boolean\n  isChild: (path: Path, another: Path) => boolean\n  isCommon: (path: Path, another: Path) => boolean\n  isDescendant: (path: Path, another: Path) => boolean\n  isParent: (path: Path, another: Path) => boolean\n  isPath: (value: any) => value is Path\n  isSibling: (path: Path, another: Path) => boolean\n  levels: (\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Path[]\n  next: (path: Path) => Path\n  parent: (path: Path) => Path\n  previous: (path: Path) => Path\n  relative: (path: Path, ancestor: Path) => Path\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Path | null\n}\n\nexport const Path: PathInterface = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  transform: (ref: PathRef, op: Operation) => void\n}\n\nexport const PathRef: PathRefInterface = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointInterface {\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n  isAfter: (point: Point, another: Point) => boolean\n  isBefore: (point: Point, another: Point) => boolean\n  equals: (point: Point, another: Point) => boolean\n  isPoint: (value: any) => value is Point\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Point | null\n}\n\nexport const Point: PointInterface = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  transform: (ref: PointRef, op: Operation) => void\n}\n\nexport const PointRef: PointRefInterface = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeInterface {\n  edges: (\n    range: Range,\n    options?: {\n      reverse?: boolean\n    }\n  ) => [Point, Point]\n  end: (range: Range) => Point\n  equals: (range: Range, another: Range) => boolean\n  includes: (range: Range, target: Path | Point | Range) => boolean\n  intersection: (range: Range, another: Range) => Range | null\n  isBackward: (range: Range) => boolean\n  isCollapsed: (range: Range) => boolean\n  isExpanded: (range: Range) => boolean\n  isForward: (range: Range) => boolean\n  isRange: (value: any) => value is Range\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n  start: (range: Range) => Point\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    }\n  ) => Range | null\n}\n\nexport const Range: RangeInterface = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\nexport const RangeRef: RangeRefInterface = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport isEqual from 'lodash/isEqual'\nimport omit from 'lodash/omit'\nimport { Range } from '..'\nimport { ExtendedType } from './custom-types'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface TextInterface {\n  equals: (text: Text, another: Text, options?: { loose?: boolean }) => boolean\n  isText: (value: any) => value is Text\n  isTextList: (value: any) => value is Text[]\n  isTextProps: (props: any) => props is Partial<Text>\n  matches: (text: Text, props: Partial<Text>) => boolean\n  decorations: (node: Text, decorations: Range[]) => Text[]\n}\n\nexport const Text: TextInterface = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    return isEqual(\n      loose ? omit(text, 'text') : text,\n      loose ? omit(another, 'text') : another\n    )\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= o) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (start.offset !== end.offset &&\n            (start.offset === o || end.offset === offset)) ||\n          start.offset > o ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < o) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport interface GeneralTransforms {\n  transform: (editor: Editor, op: Operation) => void\n}\n\nexport const GeneralTransforms: GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, properties, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[key]\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else {\n          if (selection == null) {\n            if (!Range.isRange(newProperties)) {\n              throw new Error(\n                `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                  newProperties\n                )} when there is no current selection.`\n              )\n            }\n\n            selection = { ...newProperties }\n          }\n\n          for (const key in newProperties) {\n            const value = newProperties[key]\n\n            if (value == null) {\n              if (key === 'anchor' || key === 'focus') {\n                throw new Error(`Cannot remove the \"${key}\" selection property`)\n              }\n\n              delete selection[key]\n            } else {\n              selection[key] = value\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children)\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\nimport { NodeMatch } from '../interfaces/editor'\n\nexport interface NodeTransforms {\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    }\n  ) => void\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => void\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const NodeTransforms: NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes<T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n\n        if (\n          toRef.current &&\n          Path.isSibling(newPath, path) &&\n          Path.isAfter(newPath, path)\n        ) {\n          // When performing a sibling move to a later index, the path at the destination is shifted\n          // to before the insertion point instead of after. To ensure our group of nodes are inserted\n          // in the correct order we increment toRef to account for that\n          toRef.current = Path.next(toRef.current)\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes<T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n          always: !endAtEndOfNode,\n        })\n        const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n          always: !startAtStartOfNode,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            // Omit new properties from the old property list rather than set them to undefined\n            if (node.hasOwnProperty(k)) properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes<T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path)\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => Element.isAncestor(node) && node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes<T extends Node>(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n =>\n              Element.isAncestor(commonNode) && commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport interface SelectionTransforms {\n  collapse: (\n    editor: Editor,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  deselect: (editor: Editor) => void\n  move: (\n    editor: Editor,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  select: (editor: Editor, target: Location) => void\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\nexport const SelectionTransforms: SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor): void {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location): void {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>): void {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport interface TextTransforms {\n  delete: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: {\n      at?: Location\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const TextTransforms: TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        const [, end] = Range.edges(at)\n        const endOfDoc = Editor.end(editor, [])\n\n        if (!Point.equals(end, endOfDoc)) {\n          at = Editor.unhangRange(editor, at, { voids })\n        }\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = reverse\n        ? startRef.unref() || endRef.unref()\n        : endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","ref","Editor","pathRefs","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","Transforms","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","delete","reverse","deleteForward","deleteFragment","direction","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","currentNode","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","newParent","newIndex","resultPath","nextPath","next","objectWithoutPropertiesLoose","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","isAncestor","isPlainObject","isNodeList","isElementList","isArray","every","val","isElementProps","props","undefined","matches","element","IS_EDITOR_CACHE","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","some","isBlock","hasInlines","hasTexts","cachedIsEditor","isRange","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","last","leaf","block","prevNode","prevPath","blockPath","pointAfterLocation","to","span","isPath","Error","parent","includes","universal","Span","isSpan","nodeEntries","pass","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","dirtyPath","pop","parentPath","depth","firstPath","lastPath","common","isPoint","hasPath","pathRef","affinity","current","unref","refs","pointRef","isNewBlock","blockText","leafTextRemaining","leafTextOffset","e","s","string","reverseText","isFirst","calcDistance","pointBeforeLocation","rangeRef","t","unhangRange","endBlock","skip","isBefore","void","fn","Location","isLocation","IS_NODE_LIST_CACHE","root","index","JSON","stringify","c","childPath","another","descendant","elements","extractProps","properties","newRoot","produce","r","splice","isNode","cachedResult","isTextProps","visited","isAfter","nextIndex","map","texts","isNodeOperation","isOperation","endsWith","position","newProperties","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","hasPrevious","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","result","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","points","affinityAnchor","affinityFocus","isEqual","omit","isTextList","hasOwnProperty","decorations","leaves","dec","o","Object","assign","middle","off","GeneralTransforms","createDraft","truePath","newNode","finishDraft","isDraft","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","hasSingleChildNest","emptyRef","toRef","targets","depths","splitMode","endAtEndOfNode","startAtStartOfNode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","endOfDoc","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}
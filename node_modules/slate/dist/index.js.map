{"version":3,"file":"index.js","sources":["../../../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/element.ts","../src/interfaces/editor.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: (direction?: 'forward' | 'backward') => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor, { reverse: direction === 'backward' })\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const currentNode = Node.get(editor, path)\n        if (Text.isText(currentNode)) continue\n        const child = node.children[i] as Descendant\n        const prev = currentNode.children[n - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation): Path[] => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path, Descendant, ExtendedType, Ancestor } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  isAncestor: (value: any) => value is Ancestor\n  isElement: (value: any) => value is Element\n  isElementList: (value: any) => value is Element[]\n  isElementProps: (props: any) => props is Partial<Element>\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\nexport const Element: ElementInterface = {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import isPlainObject from 'is-plain-object'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\nimport { Descendant } from './node'\nimport { Element } from './element'\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface BaseEditor {\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: Omit<Text, 'text'> | null\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: (direction?: 'forward' | 'backward') => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport interface EditorInterface {\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  addMark: (editor: Editor, key: string, value: any) => void\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  deleteBackward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteForward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteFragment: (\n    editor: Editor,\n    options?: {\n      direction?: 'forward' | 'backward'\n    }\n  ) => void\n  edges: (editor: Editor, at: Location) => [Point, Point]\n  end: (editor: Editor, at: Location) => Point\n  first: (editor: Editor, at: Location) => NodeEntry\n  fragment: (editor: Editor, at: Location) => Descendant[]\n  hasBlocks: (editor: Editor, element: Element) => boolean\n  hasInlines: (editor: Editor, element: Element) => boolean\n  hasPath: (editor: Editor, path: Path) => boolean\n  hasTexts: (editor: Editor, element: Element) => boolean\n  insertBreak: (editor: Editor) => void\n  insertFragment: (editor: Editor, fragment: Node[]) => void\n  insertNode: (editor: Editor, node: Node) => void\n  insertText: (editor: Editor, text: string) => void\n  isBlock: (editor: Editor, value: any) => value is Element\n  isEditor: (value: any) => value is Editor\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n  isEmpty: (editor: Editor, element: Element) => boolean\n  isInline: (editor: Editor, value: any) => value is Element\n  isNormalizing: (editor: Editor) => boolean\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n  isVoid: (editor: Editor, value: any) => value is Element\n  last: (editor: Editor, at: Location) => NodeEntry\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Text>\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  node: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  normalize: (\n    editor: Editor,\n    options?: {\n      force?: boolean\n    }\n  ) => void\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Ancestor>\n  path: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => Path\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PathRef\n  pathRefs: (editor: Editor) => Set<PathRef>\n  point: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      edge?: 'start' | 'end'\n    }\n  ) => Point\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PointRef\n  pointRefs: (editor: Editor) => Set<PointRef>\n  positions: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<Point, void, undefined>\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  range: (editor: Editor, at: Location, to?: Location) => Range\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    }\n  ) => RangeRef\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n  removeMark: (editor: Editor, key: string) => void\n  start: (editor: Editor, at: Location) => Point\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      voids?: boolean\n    }\n  ) => string\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      voids?: boolean\n    }\n  ) => Range\n  void: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<Element> | undefined\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n}\n\nconst IS_EDITOR_CACHE = new WeakMap<object, boolean>()\n\nexport const Editor: EditorInterface = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(\n    editor: Editor,\n    options: {\n      direction?: 'forward' | 'backward'\n    } = {}\n  ): void {\n    const { direction = 'forward' } = options\n    editor.deleteFragment(direction)\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    if (!isPlainObject(value)) return false\n    const cachedIsEditor = IS_EDITOR_CACHE.get(value)\n    if (cachedIsEditor !== undefined) {\n      return cachedIsEditor\n    }\n    const isEditor =\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    IS_EDITOR_CACHE.set(value, isEditor)\n    return isEditor\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n, p)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Omit<Text, 'text'> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointAfterLocation = Editor.after(editor, at, { voids })\n\n    if (!pointAfterLocation) return\n\n    const [, to] = Editor.last(editor, [])\n\n    const span: Span = [pointAfterLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node, path)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ): void {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  hasPath(editor: Editor, path: Path): boolean {\n    return Node.has(editor, path)\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const {\n      at = editor.selection,\n      unit = 'offset',\n      reverse = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    /**\n     * Algorithm notes:\n     *\n     * Each step `distance` is dynamic depending on the underlying text\n     * and the `unit` specified.  Each step, e.g., a line or word, may\n     * span multiple text nodes, so we iterate through the text both on\n     * two levels in step-sync:\n     *\n     * `leafText` stores the text on a text leaf level, and is advanced\n     * through using the counters `leafTextOffset` and `leafTextRemaining`.\n     *\n     * `blockText` stores the text on a block level, and is shortened\n     * by `distance` every time it is advanced.\n     *\n     * We only maintain a window of one blockText and one leafText because\n     * a block node always appears before all of its leaf nodes.\n     */\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let isNewBlock = false\n    let blockText = ''\n    let distance = 0 // Distance for leafText to catch up to blockText.\n    let leafTextRemaining = 0\n    let leafTextOffset = 0\n\n    // Iterate through all nodes in range, grabbing entire textual content\n    // of block nodes in blockText, and text nodes in leafText.\n    // Exploits the fact that nodes are sequenced in such a way that we first\n    // encounter the block node, then all of its text nodes, so when iterating\n    // through the blockText and leafText we just need to remember a window of\n    // one block node and leaf node, respectively.\n    for (const [node, path] of Editor.nodes(editor, { at, reverse, voids })) {\n      /*\n       * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n       */\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, so by default we will always\n        // yield their first point. If the `voids` option is set to true,\n        // then we will iterate over their content.\n        if (!voids && editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        // Inline element nodes are ignored as they don't themselves\n        // contribute to `blockText` or `leafText` - their parent and\n        // children do.\n        if (editor.isInline(node)) continue\n\n        // Block element node - set `blockText` to its text content.\n        if (Editor.hasInlines(editor, node)) {\n          // We always exhaust block nodes before encountering a new one:\n          //   console.assert(blockText === '',\n          //     `blockText='${blockText}' - `+\n          //     `not exhausted before new block node`, path)\n\n          // Ensure range considered is capped to `range`, in the\n          // start/end edge cases where block extends beyond range.\n          // Equivalent to this, but presumably more performant:\n          //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n          //   blockRange = Range.intersection(range, blockRange) // intersect\n          //   blockText = Editor.string(editor, blockRange, { voids })\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n          blockText = reverse ? reverseText(blockText) : blockText\n          isNewBlock = true\n        }\n      }\n\n      /*\n       * TEXT LEAF NODE - Iterate through text content, yielding\n       * positions every `distance` offset according to `unit`.\n       */\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n\n        // Proof that we always exhaust text nodes before encountering a new one:\n        //   console.assert(leafTextRemaining <= 0,\n        //     `leafTextRemaining=${leafTextRemaining} - `+\n        //     `not exhausted before new leaf text node`, path)\n\n        // Reset `leafText` counters for new text node.\n        if (isFirst) {\n          leafTextRemaining = reverse\n            ? first.offset\n            : node.text.length - first.offset\n          leafTextOffset = first.offset // Works for reverse too.\n        } else {\n          leafTextRemaining = node.text.length\n          leafTextOffset = reverse ? leafTextRemaining : 0\n        }\n\n        // Yield position at the start of node (potentially).\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset: leafTextOffset }\n          isNewBlock = false\n        }\n\n        // Yield positions every (dynamically calculated) `distance` offset.\n        while (true) {\n          // If `leafText` has caught up with `blockText` (distance=0),\n          // and if blockText is exhausted, break to get another block node,\n          // otherwise advance blockText forward by the new `distance`.\n          if (distance === 0) {\n            if (blockText === '') break\n            distance = calcDistance(blockText, unit)\n            blockText = blockText.slice(distance)\n          }\n\n          // Advance `leafText` by the current `distance`.\n          leafTextOffset = reverse\n            ? leafTextOffset - distance\n            : leafTextOffset + distance\n          leafTextRemaining = leafTextRemaining - distance\n\n          // If `leafText` is exhausted, break to get a new leaf node\n          // and set distance to the overflow amount, so we'll (maybe)\n          // catch up to blockText in the next leaf text node.\n          if (leafTextRemaining < 0) {\n            distance = -leafTextRemaining\n            break\n          }\n\n          // Successfully walked `distance` offsets through `leafText`\n          // to catch up with `blockText`, so we can reset `distance`\n          // and yield this position in this node.\n          distance = 0\n          yield { path, offset: leafTextOffset }\n        }\n      }\n    }\n    // Proof that upon completion, we've exahusted both leaf and block text:\n    //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n    //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n    // Helper:\n    // Return the distance in offsets for a step of size `unit` on given string.\n    function calcDistance(text: string, unit: string) {\n      if (unit === 'character') {\n        return getCharacterDistance(text)\n      } else if (unit === 'word') {\n        return getWordDistance(text)\n      } else if (unit === 'line' || unit === 'block') {\n        return text.length\n      }\n      return 1\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n    if (!pointBeforeLocation) {\n      return\n    }\n\n    const [, to] = Editor.first(editor, [])\n\n    // The search location is from the start of the document to the path of\n    // the point before the location passed in\n    const span: Span = [pointBeforeLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n\n  string(\n    editor: Editor,\n    at: Location,\n    options: {\n      voids?: boolean\n    } = {}\n  ): string {\n    const { voids = false } = options\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n      voids,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  isLocation: (value: any) => value is Location\n}\n\nexport const Location: LocationInterface = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  isSpan: (value: any) => value is Span\n}\n\nexport const Span: SpanInterface = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeInterface {\n  ancestor: (root: Node, path: Path) => Ancestor\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n  child: (root: Node, index: number) => Descendant\n  children: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n  descendant: (root: Node, path: Path) => Descendant\n  descendants: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  elements: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<ElementEntry, void, undefined>\n  extractProps: (node: Node) => NodeProps\n  first: (root: Node, path: Path) => NodeEntry\n  fragment: (root: Node, range: Range) => Descendant[]\n  get: (root: Node, path: Path) => Node\n  has: (root: Node, path: Path) => boolean\n  isNode: (value: any) => value is Node\n  isNodeList: (value: any) => value is Node[]\n  last: (root: Node, path: Path) => NodeEntry\n  leaf: (root: Node, path: Path) => Text\n  levels: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  matches: (node: Node, props: Partial<Node>) => boolean\n  nodes: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  parent: (root: Node, path: Path) => Ancestor\n  string: (node: Node) => string\n  texts: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nconst IS_NODE_LIST_CACHE = new WeakMap<any[], boolean>()\n\nexport const Node: NodeInterface = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Extract props from a Node.\n   */\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    const cachedResult = IS_NODE_LIST_CACHE.get(value)\n    if (cachedResult !== undefined) {\n      return cachedResult\n    }\n    const isNodeList = value.every(val => Node.isNode(val))\n    IS_NODE_LIST_CACHE.set(value, isNodeList)\n    return isNodeList\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport interface OperationInterface {\n  isNodeOperation: (value: any) => value is NodeOperation\n  isOperation: (value: any) => value is Operation\n  isOperationList: (value: any) => value is Operation[]\n  isSelectionOperation: (value: any) => value is SelectionOperation\n  isTextOperation: (value: any) => value is TextOperation\n  inverse: (op: Operation) => Operation\n}\n\nexport const Operation: OperationInterface = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathInterface {\n  ancestors: (path: Path, options?: { reverse?: boolean }) => Path[]\n  common: (path: Path, another: Path) => Path\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n  endsAfter: (path: Path, another: Path) => boolean\n  endsAt: (path: Path, another: Path) => boolean\n  endsBefore: (path: Path, another: Path) => boolean\n  equals: (path: Path, another: Path) => boolean\n  hasPrevious: (path: Path) => boolean\n  isAfter: (path: Path, another: Path) => boolean\n  isAncestor: (path: Path, another: Path) => boolean\n  isBefore: (path: Path, another: Path) => boolean\n  isChild: (path: Path, another: Path) => boolean\n  isCommon: (path: Path, another: Path) => boolean\n  isDescendant: (path: Path, another: Path) => boolean\n  isParent: (path: Path, another: Path) => boolean\n  isPath: (value: any) => value is Path\n  isSibling: (path: Path, another: Path) => boolean\n  levels: (\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Path[]\n  next: (path: Path) => Path\n  parent: (path: Path) => Path\n  previous: (path: Path) => Path\n  relative: (path: Path, ancestor: Path) => Path\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Path | null\n}\n\nexport const Path: PathInterface = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  transform: (ref: PathRef, op: Operation) => void\n}\n\nexport const PathRef: PathRefInterface = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointInterface {\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n  isAfter: (point: Point, another: Point) => boolean\n  isBefore: (point: Point, another: Point) => boolean\n  equals: (point: Point, another: Point) => boolean\n  isPoint: (value: any) => value is Point\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Point | null\n}\n\nexport const Point: PointInterface = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  transform: (ref: PointRef, op: Operation) => void\n}\n\nexport const PointRef: PointRefInterface = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeInterface {\n  edges: (\n    range: Range,\n    options?: {\n      reverse?: boolean\n    }\n  ) => [Point, Point]\n  end: (range: Range) => Point\n  equals: (range: Range, another: Range) => boolean\n  includes: (range: Range, target: Path | Point | Range) => boolean\n  intersection: (range: Range, another: Range) => Range | null\n  isBackward: (range: Range) => boolean\n  isCollapsed: (range: Range) => boolean\n  isExpanded: (range: Range) => boolean\n  isForward: (range: Range) => boolean\n  isRange: (value: any) => value is Range\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n  start: (range: Range) => Point\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    }\n  ) => Range | null\n}\n\nexport const Range: RangeInterface = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\nexport const RangeRef: RangeRefInterface = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport isEqual from 'lodash/isEqual'\nimport omit from 'lodash/omit'\nimport { Range } from '..'\nimport { ExtendedType } from './custom-types'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface TextInterface {\n  equals: (text: Text, another: Text, options?: { loose?: boolean }) => boolean\n  isText: (value: any) => value is Text\n  isTextList: (value: any) => value is Text[]\n  isTextProps: (props: any) => props is Partial<Text>\n  matches: (text: Text, props: Partial<Text>) => boolean\n  decorations: (node: Text, decorations: Range[]) => Text[]\n}\n\nexport const Text: TextInterface = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    return isEqual(\n      loose ? omit(text, 'text') : text,\n      loose ? omit(another, 'text') : another\n    )\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= o) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (start.offset !== end.offset &&\n            (start.offset === o || end.offset === offset)) ||\n          start.offset > o ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < o) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport interface GeneralTransforms {\n  transform: (editor: Editor, op: Operation) => void\n}\n\nexport const GeneralTransforms: GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, properties, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[key]\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else {\n          if (selection == null) {\n            if (!Range.isRange(newProperties)) {\n              throw new Error(\n                `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                  newProperties\n                )} when there is no current selection.`\n              )\n            }\n\n            selection = { ...newProperties }\n          }\n\n          for (const key in newProperties) {\n            const value = newProperties[key]\n\n            if (value == null) {\n              if (key === 'anchor' || key === 'focus') {\n                throw new Error(`Cannot remove the \"${key}\" selection property`)\n              }\n\n              delete selection[key]\n            } else {\n              selection[key] = value\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children)\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\nimport { NodeMatch } from '../interfaces/editor'\n\nexport interface NodeTransforms {\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    }\n  ) => void\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => void\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const NodeTransforms: NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes<T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n\n        if (\n          toRef.current &&\n          Path.isSibling(newPath, path) &&\n          Path.isAfter(newPath, path)\n        ) {\n          // When performing a sibling move to a later index, the path at the destination is shifted\n          // to before the insertion point instead of after. To ensure our group of nodes are inserted\n          // in the correct order we increment toRef to account for that\n          toRef.current = Path.next(toRef.current)\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes<T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n          always: !endAtEndOfNode,\n        })\n        const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n          always: !startAtStartOfNode,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            // Omit new properties from the old property list rather than set them to undefined\n            if (node.hasOwnProperty(k)) properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes<T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path)\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => Element.isAncestor(node) && node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes<T extends Node>(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n =>\n              Element.isAncestor(commonNode) && commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport interface SelectionTransforms {\n  collapse: (\n    editor: Editor,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  deselect: (editor: Editor) => void\n  move: (\n    editor: Editor,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  select: (editor: Editor, target: Location) => void\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\nexport const SelectionTransforms: SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor): void {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location): void {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>): void {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport interface TextTransforms {\n  delete: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: {\n      at?: Location\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const TextTransforms: TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        const [, end] = Range.edges(at)\n        const endOfDoc = Editor.end(editor, [])\n\n        if (!Point.equals(end, endOfDoc)) {\n          at = Editor.unhangRange(editor, at, { voids })\n        }\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        if (text.length > 0)\n          editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = reverse\n        ? startRef.unref() || endRef.unref()\n        : endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","Editor","pathRefs","ref","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","Transforms","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","reverse","deleteForward","deleteFragment","direction","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","currentNode","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","newParent","newIndex","resultPath","nextPath","next","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","isAncestor","isPlainObject","isNodeList","isElementList","isArray","every","val","isElementProps","props","undefined","matches","element","IS_EDITOR_CACHE","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","some","isBlock","hasInlines","hasTexts","cachedIsEditor","isRange","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","last","leaf","block","prevNode","prevPath","blockPath","pointAfterLocation","to","span","isPath","Error","parent","includes","universal","Span","isSpan","nodeEntries","pass","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","dirtyPath","pop","parentPath","depth","firstPath","lastPath","common","isPoint","hasPath","pathRef","affinity","current","unref","refs","pointRef","isNewBlock","blockText","leafTextRemaining","leafTextOffset","e","s","string","reverseText","isFirst","calcDistance","pointBeforeLocation","rangeRef","t","unhangRange","endBlock","skip","isBefore","fn","Location","isLocation","IS_NODE_LIST_CACHE","root","index","JSON","stringify","c","childPath","another","descendant","elements","extractProps","properties","newRoot","produce","r","splice","isNode","cachedResult","isTextProps","visited","isAfter","nextIndex","map","texts","isNodeOperation","isOperation","endsWith","position","newProperties","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","hasPrevious","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","result","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","points","affinityAnchor","affinityFocus","isEqual","omit","isTextList","hasOwnProperty","decorations","leaves","dec","o","Object","assign","middle","off","GeneralTransforms","createDraft","truePath","newNode","finishDraft","isDraft","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","hasSingleChildNest","emptyRef","toRef","targets","depths","splitMode","endAtEndOfNode","startAtStartOfNode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","endOfDoc","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}